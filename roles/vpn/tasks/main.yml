- name: Gather Facts
  setup:

- name: Generate password for the CA key
  shell: >
    openssl rand -hex 6
  register: CA_password

- set_fact:
    easyrsa_p12_export_password: "{{ (ansible_date_time.iso8601_basic|sha1|to_uuid).split('-')[0] }}"
    easyrsa_CA_password: "{{ CA_password.stdout }}"
    IP_subject_alt_name: "{{ IP_subject_alt_name }}"

- name: Change the algorithm to RSA
  set_fact:
    algo_params: "rsa:2048"
  when: Win10_Enabled is defined and Win10_Enabled == "Y"

- include: ubuntu.yml
  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- include: freebsd.yml
  when: ansible_distribution == 'FreeBSD'

- name: Install StrongSwan
  package: name=strongswan state=present

- name: Ensure that the strongswan group exist
  group: name=strongswan state=present

- name: Ensure that the strongswan user exist
  user: name=strongswan group=strongswan state=present

- name: Setup the strongswan.conf file from our template
  template: src=strongswan.conf.j2 dest={{ config_prefix|default('/') }}etc/strongswan.conf owner=root group="{{ root_group|default('root') }}" mode=0644
  notify:
    - restart strongswan

- name: Setup the ipsec.conf file from our template
  template: src=ipsec.conf.j2 dest={{ config_prefix|default('/') }}etc/ipsec.conf owner=root group="{{ root_group|default('root') }}" mode=0644
  notify:
    - restart strongswan

- name: Setup the ipsec.secrets file
  template: src=ipsec.secrets.j2 dest={{ config_prefix|default('/') }}etc/ipsec.secrets owner=strongswan group="{{ root_group|default('root') }}" mode=0600
  notify:
    - restart strongswan

- name: Get loaded plugins
  shell: >
    find {{ config_prefix|default('/') }}etc/strongswan.d/charon/ -type f -name '*.conf' -exec basename {} \; | cut -f1 -d.
  register: strongswan_plugins

- name: Disable unneeded plugins
  lineinfile: dest="{{ config_prefix|default('/') }}etc/strongswan.d/charon/{{ item }}.conf" regexp='.*load.*' line='load = no' state=present
  notify:
    - restart strongswan
  when: item not in strongswan_enabled_plugins
  with_items: "{{ strongswan_plugins.stdout_lines }}"

- name: Ensure that required plugins are enabled
  lineinfile: dest="{{ config_prefix|default('/') }}etc/strongswan.d/charon/{{ item }}.conf" regexp='.*load.*' line='load = yes' state=present
  notify:
    - restart strongswan
  when: item in strongswan_enabled_plugins
  with_items: "{{ strongswan_plugins.stdout_lines }}"

- include: openssl.yml

- name: Copy the CA cert to the strongswan directory
  copy: src='configs/{{ IP_subject_alt_name }}/pki/cacert.pem' dest={{ config_prefix|default('/') }}etc/ipsec.d/cacerts/ca.crt owner=strongswan group="{{ root_group|default('root') }}" mode=0600
  notify:
    - restart strongswan

- name: Copy the server cert to the strongswan directory
  copy: src='configs/{{ IP_subject_alt_name }}/pki/certs/{{ IP_subject_alt_name }}.crt' dest={{ config_prefix|default('/') }}etc/ipsec.d/certs/{{ IP_subject_alt_name }}.crt owner=strongswan group="{{ root_group|default('root') }}" mode=0600
  notify:
    - restart strongswan

- name: Copy the server key to the strongswan directory
  copy: src='configs/{{ IP_subject_alt_name }}/pki/private/{{ IP_subject_alt_name }}.key' dest={{ config_prefix|default('/') }}etc/ipsec.d/private/{{ IP_subject_alt_name }}.key owner=strongswan group="{{ root_group|default('root') }}" mode=0600
  notify:
    - restart strongswan

- name: Restrict permissions for the remote private directories
  file: path="{{ item }}" state=directory mode=0700 owner=strongswan group="{{ root_group|default('root') }}"
  with_items:
    - "{{ config_prefix|default('/') }}etc/ipsec.d/private"

- include: client_configs.yml

- meta: flush_handlers

- name: StrongSwan started
  service: name=strongswan state=started
